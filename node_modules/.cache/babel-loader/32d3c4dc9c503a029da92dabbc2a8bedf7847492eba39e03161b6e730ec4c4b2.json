{"ast":null,"code":"var _jsxFileName = \"/home/mayank/Desktop/Investor-SIte/market/src/components/Funds.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Funds.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Funds = () => {\n  _s();\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const API_URL = 'https://api.sec-api.io/?token=6b3bf19df1784cb1a59bf55a7834ca93a3e59ec3cdc6d629837d96b711f99a5e'; // Replace with your actual API token\n        const requestBody = {\n          query: 'formType:\"NPORT-P\"',\n          from: '0',\n          size: '200',\n          sort: [{\n            filedAt: {\n              order: 'desc'\n            }\n          }]\n        };\n        const response = await axios.post(API_URL, requestBody, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // const data = response.data.filings;\n        // const filingDetails = await Promise.all(\n        //   data.map(async (item) => {\n        //     try {\n        // Fetch the XML data from the linkToFilingDetails URL\n        //       const filingResponse = await axios.get(item.linkToFilingDetails);\n        //       const parser = new DOMParser();\n        //       const xmlDoc = parser.parseFromString(filingResponse.data, \"text/xml\");\n        //       console.log(\"XML Doc\", xmlDoc);\n\n        //       const returnInfo = xmlDoc.querySelector('ItemB5ReturnInformation');\n\n        //       if (returnInfo) {\n        //         const monthlyReturns = [\n        //           parseFloat(returnInfo.querySelector('MonthlyTotalReturnsMonth1')?.textContent || 0),\n        //           parseFloat(returnInfo.querySelector('MonthlyTotalReturnsMonth2')?.textContent || 0),\n        //           parseFloat(returnInfo.querySelector('MonthlyTotalReturnsMonth3')?.textContent || 0)\n        //         ];\n        //         return {\n        //           name: xmlDoc.querySelector('FundName')?.textContent || 'N/A',\n        //           position: xmlDoc.querySelector('Position')?.textContent || 'N/A',\n        //           year: xmlDoc.querySelector('Year')?.textContent || 'N/A',\n        //           monthlyReturns,\n        //           classIdentificationNumber: returnInfo.querySelector('ClassIdentificationNumber')?.textContent || 'N/A'\n        //         };\n        //       }\n        //       return null;\n        //     } catch (error) {\n        //       console.error('Error fetching filing details:', error);\n        //       return null;\n        //     }\n        //   })\n        // );\n\n        // try{}\n\n        function displayXML(xmlDoc) {\n          // Example: Display the entire XML as a string\n          const xmlString = new XMLSerializer().serializeToString(xmlDoc);\n          console.log(\"XML String\", xmlString);\n\n          // Insert this string into a preformatted <pre> tag for readability\n          // document.getElementById(\"xmlContent\").innerText = xmlString;\n\n          // Example: Get the content of a specific node\n          // const specificNode = xmlDoc.getElementsByTagName(\"YourElementTagName\")[0];\n          if (specificNode) {\n            document.getElementById(\"specificContent\").innerText = specificNode.textContent;\n          }\n        }\n        try {\n          axios.get('https://www.sec.gov/Archives/edgar/data/1485894/000175272424171728/xslFormNPORT-P_X01/primary_doc.xml').then(response => {\n            // The response.data contains the XML content as a string\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n            // Display the content or manipulate the XML as needed\n            displayXML(xmlDoc);\n          }).catch(error => console.error('Error fetching XML:', error));\n        } catch (error) {\n          console.error('There was an error fetching the data!', error);\n        }\n        // .catch(error => console.error('Error fetching XML:', error));\n        //     const filteredResults = filingDetails.filter(item => item !== null);\n        //     setResults(filteredResults);\n      } catch (error) {\n        console.error('There was an error fetching the data!', error);\n        setResults([]); // Clear results on error\n      }\n    };\n    fetchResults();\n  }, []);\n  const calculateMER = monthlyReturns => {\n    const averageReturn = monthlyReturns.reduce((acc, val) => acc + val, 0) / monthlyReturns.length;\n    return (averageReturn * 12).toFixed(2);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container1\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Funds Return Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results1\",\n      children: results.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-result1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 16\n          }, this), \" \", result.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Position:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 16\n          }, this), \" \", result.position]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Year:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 16\n          }, this), \" \", result.year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Class Identification Number:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 16\n          }, this), \" \", result.classIdentificationNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Monthly Total Return Record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), result.monthlyReturns && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [result.monthlyReturns.map((returnData, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: `Month ${idx + 1}: ${returnData}`\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"MER (Annual):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 20\n            }, this), \" \", calculateMER(result.monthlyReturns), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(Funds, \"0Oir8sO9qj6087fqVYj2OrfQH1E=\");\n_c = Funds;\nexport default Funds;\nvar _c;\n$RefreshReg$(_c, \"Funds\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Funds","_s","results","setResults","fetchResults","API_URL","requestBody","query","from","size","sort","filedAt","order","response","post","headers","displayXML","xmlDoc","xmlString","XMLSerializer","serializeToString","console","log","specificNode","document","getElementById","innerText","textContent","get","then","parser","DOMParser","parseFromString","data","catch","error","calculateMER","monthlyReturns","averageReturn","reduce","acc","val","length","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","result","index","name","position","year","classIdentificationNumber","returnData","idx","_c","$RefreshReg$"],"sources":["/home/mayank/Desktop/Investor-SIte/market/src/components/Funds.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Funds.css';\n\nconst Funds = () => {\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const API_URL = 'https://api.sec-api.io/?token=6b3bf19df1784cb1a59bf55a7834ca93a3e59ec3cdc6d629837d96b711f99a5e'; // Replace with your actual API token\n        const requestBody = {\n          query: 'formType:\"NPORT-P\"',\n          from: '0',\n          size: '200',\n          sort: [{ filedAt: { order: 'desc' } }]\n        };\n\n        const response = await axios.post(API_URL, requestBody, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // const data = response.data.filings;\n        // const filingDetails = await Promise.all(\n        //   data.map(async (item) => {\n        //     try {\n              // Fetch the XML data from the linkToFilingDetails URL\n        //       const filingResponse = await axios.get(item.linkToFilingDetails);\n        //       const parser = new DOMParser();\n        //       const xmlDoc = parser.parseFromString(filingResponse.data, \"text/xml\");\n        //       console.log(\"XML Doc\", xmlDoc);\n              \n        //       const returnInfo = xmlDoc.querySelector('ItemB5ReturnInformation');\n\n        //       if (returnInfo) {\n        //         const monthlyReturns = [\n        //           parseFloat(returnInfo.querySelector('MonthlyTotalReturnsMonth1')?.textContent || 0),\n        //           parseFloat(returnInfo.querySelector('MonthlyTotalReturnsMonth2')?.textContent || 0),\n        //           parseFloat(returnInfo.querySelector('MonthlyTotalReturnsMonth3')?.textContent || 0)\n        //         ];\n        //         return {\n        //           name: xmlDoc.querySelector('FundName')?.textContent || 'N/A',\n        //           position: xmlDoc.querySelector('Position')?.textContent || 'N/A',\n        //           year: xmlDoc.querySelector('Year')?.textContent || 'N/A',\n        //           monthlyReturns,\n        //           classIdentificationNumber: returnInfo.querySelector('ClassIdentificationNumber')?.textContent || 'N/A'\n        //         };\n        //       }\n        //       return null;\n        //     } catch (error) {\n        //       console.error('Error fetching filing details:', error);\n        //       return null;\n        //     }\n        //   })\n        // );\n\n        // try{}\n\n        function displayXML(xmlDoc) {\n          // Example: Display the entire XML as a string\n          const xmlString = new XMLSerializer().serializeToString(xmlDoc);\n          console.log(\"XML String\", xmlString);\n          \n      \n          // Insert this string into a preformatted <pre> tag for readability\n          // document.getElementById(\"xmlContent\").innerText = xmlString;\n      \n          // Example: Get the content of a specific node\n          // const specificNode = xmlDoc.getElementsByTagName(\"YourElementTagName\")[0];\n          if (specificNode) {\n              document.getElementById(\"specificContent\").innerText = specificNode.textContent;\n          }\n      }\n      \n        try {\n          axios.get('https://www.sec.gov/Archives/edgar/data/1485894/000175272424171728/xslFormNPORT-P_X01/primary_doc.xml')\n    .then(response => {\n        // The response.data contains the XML content as a string\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n        // Display the content or manipulate the XML as needed\n        displayXML(xmlDoc);\n    })\n    .catch(error => console.error('Error fetching XML:', error));\n        } catch (error) {\n          console.error('There was an error fetching the data!', error);\n        }\n    // .catch(error => console.error('Error fetching XML:', error));\n    //     const filteredResults = filingDetails.filter(item => item !== null);\n    //     setResults(filteredResults);\n      } catch (error) {\n        console.error('There was an error fetching the data!', error);\n        setResults([]); // Clear results on error\n      }\n    };\n\n    fetchResults();\n  }, []);\n\n  const calculateMER = (monthlyReturns) => {\n    const averageReturn = monthlyReturns.reduce((acc, val) => acc + val, 0) / monthlyReturns.length;\n    return (averageReturn * 12).toFixed(2);\n  };\n\n  return (\n    <div className=\"search-container1\">\n      <h2>Funds Return Information</h2>\n      <div className=\"search-results1\">\n        {results.map((result, index) => (\n          <div key={index} className=\"search-result1\">\n            <p><strong>Name:</strong> {result.name}</p>\n            <p><strong>Position:</strong> {result.position}</p>\n            <p><strong>Year:</strong> {result.year}</p>\n            <p><strong>Class Identification Number:</strong> {result.classIdentificationNumber}</p>\n\n            <h3>Monthly Total Return Record</h3>\n            {result.monthlyReturns && (\n              <div>\n                {result.monthlyReturns.map((returnData, idx) => (\n                  <p key={idx}>{`Month ${idx + 1}: ${returnData}`}</p>\n                ))}\n                <p><strong>MER (Annual):</strong> {calculateMER(result.monthlyReturns)}%</p>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Funds;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}