{"ast":null,"code":"var _jsxFileName = \"/home/mayank/Desktop/Investor-SIte/market/src/components/Funds.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './Funds.css';\n\n// const Funds = ({ type }) => {\n//   const [query, setQuery] = useState('');\n//   const [results, setResults] = useState([]);\n\n//   useEffect(() => {\n//     const fetchResults = async () => {\n//       if (query.length < 3) {\n//         setResults([]);\n//         return;\n//       }\n\n//       try {\n//         const response = await axios.get('/data/Compensation2.json');\n//         const data = response.data;\n\n//         const filteredResults = data.filter(item =>\n//           item.ticker.toLowerCase().includes(query.toLowerCase())\n//         );\n\n//         setResults(filteredResults);\n//       } catch (error) {\n//         console.error('There was an error fetching the data!', error);\n//         setResults([]); // Clear results on error\n//       }\n//     };\n\n//     fetchResults();\n//   }, [query]);\n\n//   return (\n//     <div className=\"search-container1\">\n//       <h2>Search Funds</h2>\n//       <div className=\"search-input-container1\">\n//         <input\n//           type=\"text1\"\n//           placeholder={`Search for a ${type}`}\n//           value={query}\n//           onChange={(e) => setQuery(e.target.value)}\n//         />\n//         <span className=\"search-icon1\">&#x1F50D;</span> {/* Unicode for search icon */}\n//       </div>\n//       <div className=\"search-results1\">\n//         {results.map((result, index) => (\n//           <div key={index} className=\"search-result\">\n//             <p><strong>ID:</strong> {result.id}</p>\n//             <p><strong>CIK:</strong> {result.cik}</p>\n//             <p><strong>Ticker:</strong> {result.ticker}</p>\n//             <p><strong>Name:</strong> {result.name}</p>\n//             <p><strong>Position:</strong> {result.position}</p>\n//             <p><strong>Year:</strong> {result.year}</p>\n//             <p><strong>Salary:</strong> {result.salary}</p>\n//             <p><strong>Bonus:</strong> {result.bonus}</p>\n//             <p><strong>Stock Awards:</strong> {result.stockAwards}</p>\n//             <p><strong>Option Awards:</strong> {result.optionAwards}</p>\n//             <p><strong>Non-Equity Incentive Compensation:</strong> {result.nonEquityIncentiveCompensation}</p>\n//             <p><strong>Change in Pension Value and Deferred Earnings:</strong> {result.changeInPensionValueAndDeferredEarnings}</p>\n//             <p><strong>Other Compensation:</strong> {result.otherCompensation}</p>\n//             <p><strong>Total:</strong> {result.total}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Funds;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Funds.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Funds = () => {\n  _s();\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/proxy', {\n          params: {\n            url: 'https://www.sec.gov/Archives/edgar/data/355437/000175272424169953/xslFormNPORT-P_X01/primary_doc.xml'\n          }\n        });\n        const returnInfo = response.data['Item B.5. Return information'];\n        if (returnInfo) {\n          const monthlyReturns = [parseFloat(returnInfo['Monthly total returns of the Fund for each of the preceding three months – Month 1']), parseFloat(returnInfo['Monthly total returns of the Fund for each of the preceding three months – Month 2']), parseFloat(returnInfo['Monthly total returns of the Fund for each of the preceding three months – Month 3'])];\n          setResults([{\n            name: response.data.fundName,\n            position: response.data.position,\n            year: response.data.year,\n            monthlyReturns,\n            classIdentificationNumber: returnInfo['Class identification number(s) (if any) of the Class(es) for which returns are reported.']\n          }]);\n        }\n      } catch (error) {\n        console.error('There was an error fetching the data!', error);\n        setResults([]); // Clear results on error\n      }\n    };\n    fetchResults();\n  }, []);\n  const calculateMER = monthlyReturns => {\n    const averageReturn = monthlyReturns.reduce((acc, val) => acc + val, 0) / monthlyReturns.length;\n    return (averageReturn * 12).toFixed(2);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container1\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Funds Return Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-results1\",\n      children: results.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-result1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 16\n          }, this), \" \", result.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Position:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 16\n          }, this), \" \", result.position]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Year:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 16\n          }, this), \" \", result.year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Class Identification Number:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 16\n          }, this), \" \", result.classIdentificationNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Monthly Total Return Record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), result.monthlyReturns && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [result.monthlyReturns.map((returnData, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: `Month ${idx + 1}: ${returnData}`\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"MER (Annual):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 20\n            }, this), \" \", calculateMER(result.monthlyReturns), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Funds, \"0Oir8sO9qj6087fqVYj2OrfQH1E=\");\n_c = Funds;\nexport default Funds;\nvar _c;\n$RefreshReg$(_c, \"Funds\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Funds","_s","results","setResults","fetchResults","response","get","params","url","returnInfo","data","monthlyReturns","parseFloat","name","fundName","position","year","classIdentificationNumber","error","console","calculateMER","averageReturn","reduce","acc","val","length","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","result","index","returnData","idx","_c","$RefreshReg$"],"sources":["/home/mayank/Desktop/Investor-SIte/market/src/components/Funds.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './Funds.css';\n\n// const Funds = ({ type }) => {\n//   const [query, setQuery] = useState('');\n//   const [results, setResults] = useState([]);\n\n//   useEffect(() => {\n//     const fetchResults = async () => {\n//       if (query.length < 3) {\n//         setResults([]);\n//         return;\n//       }\n\n//       try {\n//         const response = await axios.get('/data/Compensation2.json');\n//         const data = response.data;\n\n//         const filteredResults = data.filter(item =>\n//           item.ticker.toLowerCase().includes(query.toLowerCase())\n//         );\n\n//         setResults(filteredResults);\n//       } catch (error) {\n//         console.error('There was an error fetching the data!', error);\n//         setResults([]); // Clear results on error\n//       }\n//     };\n\n//     fetchResults();\n//   }, [query]);\n\n//   return (\n//     <div className=\"search-container1\">\n//       <h2>Search Funds</h2>\n//       <div className=\"search-input-container1\">\n//         <input\n//           type=\"text1\"\n//           placeholder={`Search for a ${type}`}\n//           value={query}\n//           onChange={(e) => setQuery(e.target.value)}\n//         />\n//         <span className=\"search-icon1\">&#x1F50D;</span> {/* Unicode for search icon */}\n//       </div>\n//       <div className=\"search-results1\">\n//         {results.map((result, index) => (\n//           <div key={index} className=\"search-result\">\n//             <p><strong>ID:</strong> {result.id}</p>\n//             <p><strong>CIK:</strong> {result.cik}</p>\n//             <p><strong>Ticker:</strong> {result.ticker}</p>\n//             <p><strong>Name:</strong> {result.name}</p>\n//             <p><strong>Position:</strong> {result.position}</p>\n//             <p><strong>Year:</strong> {result.year}</p>\n//             <p><strong>Salary:</strong> {result.salary}</p>\n//             <p><strong>Bonus:</strong> {result.bonus}</p>\n//             <p><strong>Stock Awards:</strong> {result.stockAwards}</p>\n//             <p><strong>Option Awards:</strong> {result.optionAwards}</p>\n//             <p><strong>Non-Equity Incentive Compensation:</strong> {result.nonEquityIncentiveCompensation}</p>\n//             <p><strong>Change in Pension Value and Deferred Earnings:</strong> {result.changeInPensionValueAndDeferredEarnings}</p>\n//             <p><strong>Other Compensation:</strong> {result.otherCompensation}</p>\n//             <p><strong>Total:</strong> {result.total}</p>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Funds;\n\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Funds.css';\n\nconst Funds = () => {\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const response = await axios.get('http://localhost:4000/proxy', {\n          params: {\n            url: 'https://www.sec.gov/Archives/edgar/data/355437/000175272424169953/xslFormNPORT-P_X01/primary_doc.xml'\n          }\n        });\n\n        const returnInfo = response.data['Item B.5. Return information'];\n        if (returnInfo) {\n          const monthlyReturns = [\n            parseFloat(returnInfo['Monthly total returns of the Fund for each of the preceding three months – Month 1']),\n            parseFloat(returnInfo['Monthly total returns of the Fund for each of the preceding three months – Month 2']),\n            parseFloat(returnInfo['Monthly total returns of the Fund for each of the preceding three months – Month 3'])\n          ];\n\n          setResults([{\n            name: response.data.fundName,\n            position: response.data.position,\n            year: response.data.year,\n            monthlyReturns,\n            classIdentificationNumber: returnInfo['Class identification number(s) (if any) of the Class(es) for which returns are reported.']\n          }]);\n        }\n      } catch (error) {\n        console.error('There was an error fetching the data!', error);\n        setResults([]); // Clear results on error\n      }\n    };\n\n    fetchResults();\n  }, []);\n\n  const calculateMER = (monthlyReturns) => {\n    const averageReturn = monthlyReturns.reduce((acc, val) => acc + val, 0) / monthlyReturns.length;\n    return (averageReturn * 12).toFixed(2);\n  };\n\n  return (\n    <div className=\"search-container1\">\n      <h2>Funds Return Information</h2>\n      <div className=\"search-results1\">\n        {results.map((result, index) => (\n          <div key={index} className=\"search-result1\">\n            <p><strong>Name:</strong> {result.name}</p>\n            <p><strong>Position:</strong> {result.position}</p>\n            <p><strong>Year:</strong> {result.year}</p>\n            <p><strong>Class Identification Number:</strong> {result.classIdentificationNumber}</p>\n\n            <h3>Monthly Total Return Record</h3>\n            {result.monthlyReturns && (\n              <div>\n                {result.monthlyReturns.map((returnData, idx) => (\n                  <p key={idx}>{`Month ${idx + 1}: ${returnData}`}</p>\n                ))}\n                <p><strong>MER (Annual):</strong> {calculateMER(result.monthlyReturns)}%</p>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Funds;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}